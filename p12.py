# https://projecteuler.net/problem=12
#
# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#

import util
import math


def findNumDivisors(number):
	factors = util.FindFactor(number)
	divisors = 1
	for key in factors:
		power = factors[key]
		divisors = divisors * (power + 1)
	return divisors


def testFindNumDivisors():
	assert(findNumDivisors(3) == 2)
	assert(findNumDivisors(28) == 6)
	assert(findNumDivisors(25600) == 33) 



#testFindNumDivisors()

maxDivisor = 1
triangleSum=1
number=1
while (1):
	number += 1   
	triangleSum += number

	divisors = findNumDivisors(triangleSum)
	if (divisors > 500):
		print triangleSum, " has ", divisors, " divisors"
		break
	if (divisors > maxDivisor):
		print " found a new max: ", triangleSum, " has ", divisors, " divisors"
		maxDivisor = divisors
	




